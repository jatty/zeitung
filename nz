#!/usr/bin/env python3
# Nürnberger Zeitung und Nürnberger Nachrichten nutzen
# seit 2021 https://de.wikipedia.org/wiki/ePages

import sys
import json
import requests
from bs4 import BeautifulSoup
from datetime import date

username = 'USERNAME'
password = 'PASSWORD'

prg = sys.argv[0]
prefix = prg[prg.rfind('/'):].lstrip('/') # works with linux, use backslash for windows
publisher = prefix[:2]
publisher_url = 'epaper.' + publisher + '.de'

if len(sys.argv) > 2:
        print ("Usage:", prg, "[YYYY-mm-dd]"), exit (1)
if len(sys.argv) > 1:
        if sys.argv[1] == "--help" or sys.argv[1] == "-h":
                print ("Usage:", prg, "[YYYY-mm-dd]"), exit (1)
        datum = sys.argv[1]
else:
        datum = date.today().strftime("%Y-%m-%d")

def call_newspaper():
    s = requests.Session()
    s.max_redirects = 20

    # ePages folders
    r = s.get('https://login-api.e-pages.dk/v1/' + publisher_url + '/folders').json()

    try:
        for n in range(0, 100):
            if prefix == r['objects'][n]['prefix']:
                key = r['objects'][n]['key']
                break
    except:
        print ("Newspaper not found. Available newspapers:")
        try:
            for n in range(0, 100):
                print (r['objects'][n]['prefix'])
        except:
            print ("just rename this script to one of these prefixes.")
            exit (1)

    # ePages search
    r = s.get('https://login-api.e-pages.dk/v1/' + publisher_url + '/publications/folder/' + key + '?filter=published:' + datum + ',' + datum).json()
    if datum != r['objects'][0]['published']:
        print ("Ausgabe des angeforderten Tages nicht gefunden.")
        exit(1)

    file = r['objects'][0]['title'] + ".pdf"
    newspaper = r['objects'][0]['prefix']
    edition = str(r['objects'][0]['publication'])

    # legitimation login at publisher
    r = s.get('https://' + publisher_url)
    p = BeautifulSoup(r.text, "html.parser")
    p.find('form', id='sso_form')
    try:
      r = s.post('https:' + p.find('form', id='sso_form').get('action'),
          data = {
              # service/page works unless more 'form' structures are on the page
              'service': p.find('input', attrs={'name':'service'}).get('value'),
              'page': p.find('input', attrs={'name':'page'}).get('value'),
              'inputLogin': username, 'inputPass': password})
    except:
      print ("Login wurde nicht abgefragt.")

    url = r.url[:r.url.find('?')]; secret = r.url[r.url.find('?'):]
    secret = secret[secret.find('='):].lstrip('=')

    # get ePages token
    r = s.post('https://login-api.e-pages.dk/v1/' + publisher_url + '/private/validate/prefix/' + newspaper + '/publication/' + edition + '/token', data = '{"token": "' + secret +'"}')
    access_url = r.json()["access_url"]

    # login at library with ePages token
    r = s.get(access_url)

    # download pdf
    r = s.get('https://reader.' + publisher + '.de/' + newspaper + '/' + edition + '/fullpdf/')
    open(file, 'wb').write(r.content)
    
call_newspaper()
